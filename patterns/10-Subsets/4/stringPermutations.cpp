// System headers
#include <string>
#include <vector>
#include <queue>
#include <stdexcept>
#include <cctype>

// Local includes
#include "stringPermutations.h"

// Using declarations
using std::string;
using std::vector;
using std::queue;
using std::domain_error;

// Statics, typedefs, globals
vector<string>
String::generateAllLetterCasePermutations(const string& s) {
    if (s.empty()) {    
        throw domain_error("Error! Empty input string!");
    }

    // Vector of all letter case permutations
    vector<string> lcPermutationsV;
    // Commence by adding input string to permutations set
    lcPermutationsV.push_back(s);

    // Iterate over each character of input string sequentially
    for (string::size_type i = 0; i != s.size(); ++i) {
        const char c = s[i];
        // Skip non alphabetic characters
        if (!isalpha(c)) {
            continue;
        }
        // Generate new permutations for string with respect to current
        // character by iterating over all permutations generated uptill
        // now, copying them and changing the letter case of current
        // character of input string in each of them
        typedef vector<string>::size_type vecSzT;
        vecSzT nGenPermutations = lcPermutationsV.size();
        for (vecSzT vIdx = 0; vIdx != nGenPermutations; ++vIdx) {
            // Get a copy of generated permutation
            string permutation = lcPermutationsV[vIdx];
            // Flip the letter case of current character in old permutation
            // to get a new permutation
            if (isupper(c)) {
                permutation[i] = tolower(c);
            } else {
                permutation[i] = toupper(c);
            }
            // Append new permutation generated by letter case flipping
            // to the list of final permutations
            lcPermutationsV.push_back(permutation);
        }
    }

    return lcPermutationsV;
}
